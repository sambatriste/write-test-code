# -*- mode: org; coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org
#+TITLE: テスト「書いて」みませんか？ - Don't just Do Test, Write Test.

#+OPTIONS: toc:1
#+OPTIONS: reveal_single_file:t
#+REVEAL_EXTRA_CSS: ~/.emacs.d/lib/reveal.js/mystyle.css


* なぜテストを書くのか

- テスト書くのめんどくね？
- 打鍵すりゃいいじゃん

** テスト効率がよい

- テスト準備がかんたん
- 結果確認がかんたん
- 実行が速い

※逆にこれらが満たされないとき、アンチパターンに陥っている可能性あり

*** テスト準備、入力がかんたん

- 仕組みを作れば、あとはデータを入れ替えるだけ
- 10画面遷移するカード新規入会画面

*** 結果確認がかんたん

- 値の比較はコンピュータの得意分野
- その目視確認、本当にちゃんとできていますか？

*** 実行が速い

- 大きなwar,jarのビルド不要
- デプロイ不要、再起動不要
- 人がやるより速い

** テストの粒度を細かくできる

xUnitを使ってユニットテストを書くと、テスト対象の粒度が細かくできます。

| テスト手法 | テスト対象       |
|------------+------------------|
| xUnit      | クラス, メソッド |
| 手動テスト | 画面, プログラム |

組み上がった巨大なシステムより、部品のほうがテストが楽


*** パチンコ部品検査のバイト

- 玉が通過したことを感知するセンサー
- 先端に玉がついた棒を、センサーに通して確認

この部品を、パチンコ台に組み込んでからテストするとしたら…？

#+ATTR_HTML: :width 300px
#+ATTR_ORG:  :width 300
[[./img/sensor.jpg]]

** 設計品質向上につながる

- 良い設計であれば、テストがしやすい。
- テストが書きにくいと感じたら、設計に問題あるかも

*** 『レガシーコード改善ガイド 』

#+BEGIN_QUOTE
良い設計はテスト可能であり、テスト可能でない設計は悪い設計である、ということは常に真実です。
#+END_QUOTE

*** 平鍋 健児さん

#+BEGIN_QUOTE
EoT(Ease of Testing)の高い設計が、よいオブジェクト指向設計である。
#+END_QUOTE

http://blogs.itmedia.co.jp/hiranabe/2005/08/post_e66c.html


** 資産になる

- 回帰テスト
- システムの仕様(振る舞い)を表す
  - プロダクションコードと一緒にバージョン管理される


** 新しい技術・手法を取り入れる

テストコードが無いと新しい技術を取り入れられない。

- リファクタリング
- アジャイル
- 継続的インテグレーション, 継続的デリバリー, DevOps
- ドメイン駆動設計(Domain Driven Design)
- マイクロサービスアーキテクチャ
- テスト駆動開発(Test Driven Development)

*** テストに関連する技術・手法の依存関係
#+BEGIN_SRC plantuml :file img/techs.png :cmdline -charset UTF-8
scale 400 * 500
object Test
object Refactoring
object "CI/CD" as cicd
object DevOps
object "Microservices" as msa
object Agile
object "Domain Driven Design" as ddd
' object "Test Driven Design" as tdd

Test -- Refactoring
' Test -- Agile
Refactoring -- Agile
Agile -- ddd
' Test -- tdd
' Refactoring -- tdd
Test -- cicd
cicd -- DevOps
DevOps -- msa
DevOps -- Agile

#+END_SRC

#+RESULTS:
[[file:img/techs.png]]


** 逆に、テストを書かないと…


*** 内部のアーキテクチャ検討が適当になる

- どのクラスをどうテストするか検討していない
  - ステレオタイプの定義をしない
- エントリポイントにだらだら処理を書く
  - 巨大なexecuteメソッド

*** システム外部からテストするしかなくなる

ブラウザやコマンドラインからしかテストができません。

- モジュール単体（クラス、メソッド）の品質を上げる機会を失う
- さらに内部の構造が適当になる

*** 構造を修正できない
- テストコード無しでリファクタリングは非現実的

https://images-na.ssl-images-amazon.com/images/I/51RWpUlhNxL._SX385_BO1,204,203,200_.jpg

*** 開発のツケが保守フェーズの負担となる

- スパゲッティのため修正（コード理解）に工数がかかる
- 回帰テストがないのでテスト工数がかさむ
- 素早く開発→デプロイを繰り返すこともできない
- 自分たちのやり方に自信が持てず、保守メンバーのモチベーション低下にも

* テストコードの書きかた超入門編
** JUnitとは

Java用テスティングフレームワーク

http://junit.org/

** テストコード例

#+BEGIN_SRC java
public class MyFirstTest {

    // テストメソッドです。
    // メソッドに'@Test'アノテーションを付与することで、
    // テストメソッドとして認識されます
    @Test
    public void 指定した要素のインデックスを取得できること() {
        // 準備: テストの事前条件を整えます
        // 0:東京, 1:大阪, 2:名古屋
        List<String> cities = Arrays.asList("東京", "大阪", "名古屋");

        // 実行: テスト対象の処理を呼び出します
        int indexOfOsaka = cities.indexOf("大阪");

        // 結果比較: 実行結果が期待通りであることを確認します
        assertEquals(1, indexOfOsaka);
    }
}
#+END_SRC


** API補足解説（抜粋）

| JUnit メソッド                 | 表明する内容               |
|--------------------------------+----------------------------|
| assertEquals(expected, actual) | ２つの引数が等価であること |
| assertTrue(condition)          | 引数がtrueであること       |
| assertNotNull(object)          | 引数がnullでないこと       |

現在は、上記メソッドではなくassertThatが使用されますが、今回はassertEqualsのみ使用します。

** 表明(assertion)とは

- 「こうなっているはずだ!」「こうなっていないとおかしい!」という宣言くらいの意
- 表明が成立しなかった場合、例外が発生しテストが失敗します



** TDD Bootcampを例に（デモ）

- [[http://devtesting.jp/tddbc/?TDDBC%25E4%25BB%2599%25E5%258F%25B003%252F%25E8%25AA%25B2%25E9%25A1%258C][TDDBC仙台03課題：整数の区間]]

- 閉区間 :: 両端の点を含む区間。すなわち a ≦ x ≦ b で表されるような数直線上の範囲

#+CAPTION: 3から8の閉区間
[[./img/ClosedRange.jpg]]

* こんなときどうテストするか
** テストしにくいこんな場合

- 実行時によって動作が変わるケース
  - システムクロック
  - 乱数
- 引数以外のI/Oが必要なケース
  - ファイルI/O
  - データベース

** 基本的な考え方

- ◎ 依存関係を断ち切る
- △ テストがカバーする範囲を大きくする
  - 依存関係まとめてテストする

** ケース１: 乱数を使うので毎回戻り値が変わります

コードで説明

** ケース２：このメソッドは戻り値がなくファイルに結果を出力します

コードで説明

** データベースのテストをどうするか

ほとんどのシステムはデータベースを使用するが…

- DBアクセスまで含めてテストする
- モックを使用する

*** 参照系のテスト

- 準備データをDBに登録する
- テストを実行する
  - SELECTが発行される
- 結果を比較する

#+BEGIN_SRC plantuml :file img/select-test.png :cmdline -charset UTF-8
hide footbox
scale 400 * 400

participant テストクラス as test
participant テスト対象 as sut
database データベース as db

activate test
test -> db : 準備データを登録する

test -> sut : 呼び出す
activate sut

sut -> db : SELECT
activate db

db --> sut : 結果セット
deactivate db

sut --> test: 検索結果
deactivate sut

test --> test: 検索結果の検証する

#+END_SRC

#+RESULTS:
[[file:img/select-test.png]]


*** 更新系のテスト

- 準備データをDBに登録する
- テストを実行する
  - INSERT/UPDATEが発行される
- DBの値を検証する

#+BEGIN_SRC plantuml :file img/update-test.png :cmdline -charset UTF-8
hide footbox
scale 400 * 400

participant テストクラス as test
participant テスト対象 as sut
database データベース as db

activate test
test -> db : 準備データを登録する

test -> sut : 呼び出す
activate sut

sut -> db : UPDATE
activate db

db --> sut
deactivate db

sut --> test: 検索結果
deactivate sut

test --> db: 更新結果を検証する

#+END_SRC

#+RESULTS:
[[file:img/update-test.png]]


*** DBアクセスを含むテストの問題点

 - すごーーーーーーーーく *遅い*
 - データの準備・保守がたいへん
   - 書き方(テストコード, CSV, XML, YAML, Excel...)
   - メンテナンス(スキーマ変更に弱い)
 - 順番依存のテストになるおそれあり
   - トランザクション管理
*** DBアクセスするテストはユニットテストなのか

#+BEGIN_QUOTE
実行に0.1秒もかかる単体テストは、遅い単体テストである。

『レガシーコード改善ガイド』
#+END_QUOTE

瞬時のフィードバックが得られなくなる。


*** スローテスト対策：DBアクセスをモック化

 - DAOパターンを使用している場合はモックに差し替える
 - JMockitなどのモックライブラリを使用する

*** DBアクセスモック化の問題点

- DBとSQLというシステムの肝心要がテストコードでカバーできない
- SELECT結果を写し取る悲しさ

*** どうするか？

- DB,SQLのテストを書きたければ、やるしかない
  - ○ SQLやストアドが重要なシステム
  - ✕ DBを永続化のために使用しているシステム

- DBアクセスする遅いテストとそうでない速いテストを分ける
  - 速いテスト→遅いテストの順に実行する

* 新規プロジェクトにテストを導入する
** 絶対やっておくべきこと

- 最初から計画に織り込んでおくこと
  - どうテストを書く/するのか検討する計画に
  - あらかじめコストを積んでおく
- テストコードを正式な成果物として定義すること
- テスコトードのサンプルを作成すること

** テスト戦略を立てる

モジュールをどうテストするか、あらかじめ検討をしておく。

- どのクラスを
- どの工程で
- どうやって

テストするか

*** ステレオタイプ毎のテスト例

| クラス  | 自動 | 手動 | 説明                     |
|---------+------+------+--------------------------|
| Action  | -    | ○   | 画面との結び付きが強い   |
| Form    | ○   | △   | ユニットテストが容易     |
| Service | ○   | △   | ロジックの中心。がんばる |
| Entity  | △   | △   | 自動生成                 |
| View    | -    | ○   | レイアウト確認が必要     |
| Utility | ○   | △   | ユニットテストが容易     |

- ○ このテストで品質担保する
- △ 他のテストで間接的にテストする

*** 全てのテストを書こうとしない。

- 最初はテストを書く範囲は狭くてもよい。
  - 0->1の進歩は極めて大きい。
- 手動でテストする範囲は残るものと考える。
  - 少なくとも画面レイアウトは人間が見ることに(2016年現在)。
- いきなりEnd to Endのテストは難易度高い

** ビルド戦略を立てる

- いつ自動テストを実行するか
- CIに組み込めるか

** サンプルを作成する（重要！）

- サンプルが上手くできていれば、ほとんどの開発者はテストを書けます。
- ここで手を抜いて開発者/委託先に丸投げすると、コードにバラツキが出る。
- テストコードは成果物です。

* 既存プロジェクトにテストを導入する
** 既存プロジェクト特有の難しさ

- テストを後付けで整備する _工数_ が捻出できない
- _仕様_ がわからない
- 「レガシーシステム」の _ジレンマ_ 
  - 構造が複雑すぎてテストが書けない
  - テストが書けないので構造を変えられない

どう立ち向かっていくか。

** テストコードを整備する余力がありません

- 私のシステムには _テストコードがありません_ 。
- テストコードを整備する _工数を捻出できません_ 。

*** 突破口
- システム全体にテストコードを整備するのは大変
- _追加/変更する箇所だけ_ テストを書く

以下、具体的なテクニックを『レガシーコード改善ガイド』より。

https://images-fe.ssl-images-amazon.com/images/I/51f-xfTWkkL._SX260_.jpg

*** スプラウトメソッド

既存の巨大メソッドに機能追加する必要がある

- 追加機能を新規メソッドで作成する
- そのメソッドのテストを書く
- 元の巨大メソッドから新規メソッドを呼び出す

#+BEGIN_SRC java
    void 既存メソッド(String input) {
         // 既存の処理
         //     :
         新規メソッド(input);   // 呼び出し
         //     :
         // 既存の処理
    }
    void 新規メソッド(String input) {
         // 追加機能
    }
#+END_SRC

*** 例：修正前コード

#+BEGIN_SRC java
     public void register(Member member) {
         // DBに登録
         db.insert(member);
     }
#+END_SRC

- 登録する前にバリデーションを入れたい。

*** そのまま処理追加した例

#+BEGIN_SRC java

     public void register(Member member) {
         // 入力項目のバリデーション
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // その他のバリデーション .....
          
         // DBに登録
         db.insert(member);
     }

#+END_SRC

*** 問題点

- 正しく変更できたかどうか確認できない
  - 既存機能にテストは無く、既存メソッドのテストを書くのは大変
- 「バリデーション」と「DB登録」という _２つの操作_ がゴチャっと混在している

*** 解決案

#+BEGIN_SRC java
     public void register(Member member) {
         // 入力項目のバリデーション（『スプラウトメソッド』の呼び出し）
         validate(member);
           
         // DBに登録
         db.insert(member);
     }

     //// 新しく追加された『スプラウトメソッド』
     //// ここは簡単にテストを書ける！
     void validate(Member member) {
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // その他のバリデーション .....
     }
#+END_SRC

*** そのテストコード
#+BEGIN_SRC java
    @Test
    public void 郵便番号の桁数が不足している場合_例外が発生すること() {
         MemberService service = new MemberService();
         Member member = new Member();
         member.setName("山田太郎");
         member.setPostalCode("123456");  // 郵便番号6桁なのでエラー
         try {
             service.register(member);
             fail("期待した例外が発生しませんでした");
         } catch (IllegalArgumentException e) {
             assertEquals("郵便番号が不正です", e.getMessage());
         }
    }
#+END_SRC

※既存機能のDB登録は全く確認していない。


*** スプラウトクラス

スプラウトメソッドのクラス版

- 追加する機能を実現するクラスを新規追加する
- そのクラスのテストを書く
- 元の巨大メソッドから新規クラスを呼び出す

#+BEGIN_SRC plantuml :file img/sp-class.png :cmdline -charset UTF-8
scale 400 * 400
class 既存クラス
class 新規クラス
class テストクラス
既存クラス --> 新規クラス : 呼び出す
テストクラス --> 新規クラス : テストする
#+END_SRC

#+RESULTS:
[[file:img/sp-class.png]]



*** スプラウトクラスの例

#+BEGIN_SRC java
     public void register(Member member) {
         // 入力項目のバリデーション（『スプラウトクラス』の呼び出し）
         MemberValidator validator = new MemberValidator();
         validator.validate(member);
         // DBに登録
         db.insert(member);
     }
#+END_SRC

#+BEGIN_SRC java
class MemberValidator {
     void validate(Member member) {
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // .....
     }
}
#+END_SRC

*** スプラウトメソッドとの使い分け

以下のケースでは、スプラウトクラスを使用

- 既存クラスが大きすぎてメソッド追加したくない
- クラスのテストが書きにくい
  - いろんなものが無いとnewできない、実行できない
    - DBコネクション
    - 入力ファイル
- 追加する機能が元クラスの責務から外れる

** システムの仕様がわかりません

- テストを書くには _仕様を理解_ する必要があります
- 設計書はメンテされておらず、何が正解なのか誰もわかりません
- 唯一言えるのは、 _現在の動作が正解_ ということだけです

*** 仕様化テスト

現在のシステムの動作を正として、システムの振る舞いを写し取るテスト。
(Characterization Test)

- Characterization :: 性格描写、特徴付け、特性評価

*** 仕様化テストの書き方

- とりあえず適当な入力で既存機能を呼び出してみる
- 適当な値で結果比較する
- 結果比較に失敗するので、期待値を実際の値に書き換える
- カバレッジを見ながら、上記作業を繰り返す

以下、実際にやってみます。

*** デモ(例：割引率を計算する。)

- 1千円以上1万円未満買い上げの方は1割引
- 1万円以上お買い上げの方は2割引
- 1千円未満は割引なし

| お買上げ額    | 割引率 |
|---------------+--------|
| ～1000円      |     0% |
| 1000～10000円 |    10% |
| 10000円～     |    20% |


「価格に負数が渡されて請求額が不正になるバグが発覚した」とする。

** やる気が出ません

- 毎日スパゲッティコードを相手しています。
- とても改善ができると思えません。


⇒レガシーコード改善ガイド  第24章 
 『もうウンザリです。何も改善できません』


*** 少々コードが整備されたところで現実は変わらないのでは？

#+BEGIN_QUOTE
「どうせ90パーセントの時間をヘドロのようなものを相手に過ごすのに、この小さい部分だけきれいにしたところで何だというのだ。もちろん、この小さな部分は改善できる。しかし、それが今日の午後、あるいは明日の私にとって何の役に立つだろうか？」。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 改善を続けると…

#+BEGIN_QUOTE
しかし、一貫してそのような小さな改善を続ければ、数ヶ月の間にシステムは見違えるような状態になります。ある日の朝、ヘドロを相手に汚い仕事をするつもりで会社に来ると、次のことに気づきます。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 自分が変わる

#+BEGIN_QUOTE
「あれ？このコードはいい感じになっているぞ。誰かがこのコードを最近リファクタリングしたようだ」。その時点、すなわち優れたコードと悪いコードの違いを直感的に理解できた時こそが、皆さんが変わる時です。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 隣の新規開発の芝は、実はそれほど青くない

#+BEGIN_QUOTE
レガシーシステムを担当する人たちは、しばしば新規開発に携わることを望みます。
＜中略＞
しかし率直に言って、新規開発には、新規開発なりの問題があります。

『レガシーコード改善ガイド』
#+END_QUOTE

*** 取り組む姿勢が重要

#+BEGIN_QUOTE
私は、数百万行ものレガシーコードを扱っているいくつかのチームを訪れたことがあります。これらのチームは、毎日が挑戦であり、物事をより良くする機会であるととらえ、仕事を楽しんでいました。

『レガシーコード改善ガイド』
#+END_QUOTE

新規か保守かは重要でない

*** 本章のまとめ

- コードを変えれば自分が変わる（成長する）
  - _正しいやり方_ を覚える
    - テストが書ける
    - リファクタリングができる
  - 正しいやり方ができると _自信_ が持てる
- 新規か保守かは重要でない
  - むしろ重要なのは取り組む姿勢
  - 指示をもらうのではなく、 _許可・裁量_ をもらいましょう

* おまけ：参考文献


** レガシーコード改善ガイド
- テストコードが無いシステムにどう立ち向かうか
https://images-na.ssl-images-amazon.com/images/I/51dVODTDz-L._SX258_BO1,204,203,200_.jpg

** 新装版 リファクタリング―既存のコードを安全に改善する―
- 初版より翻訳が良くなったそうです

https://images-na.ssl-images-amazon.com/images/I/51RWpUlhNxL._SX385_BO1,204,203,200_.jpg

** JUnit実践入門 ～ 体系的に学ぶユニットテストの技法 
- Java使いならお勧め

https://images-na.ssl-images-amazon.com/images/I/51TaOch1LJL._SX351_BO1,204,203,200_.jpg

** 実践 JUnit ―達人プログラマーのユニットテスト技法
- もうちょっと抽象的
- 大阪府立図書館にあります

https://images-na.ssl-images-amazon.com/images/I/51E0kY-W5gL._SX352_BO1,204,203,200_.jpg

