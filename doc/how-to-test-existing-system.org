# -*- coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org
#+TITLE: 新規プロジェクトにテストを導入する


* 絶対やっておくべきこと

最初からテスト戦略を検討する計画にしておく（コストを積んでおく）。

「できればやる」は「やらない」と同義

* テスト戦略を立てる。

モジュールをどうテストするか

こういうふうにした根拠とか

 | ステレオタイプ | 自動 | 手動 | 根拠                         |
 |----------------+------+------+------------------------------|
 | Action         | -    | ○   | 画面との結び付きが強い       |
 | Form           | ○   | △   | ユニットテストが容易         |
 | Service        | ○   | △   | ロジックの中心なのでがんばる |
 | Entity         | △   | △   | 自動生成                     |
 | View           | -    | ○   | レイアウト確認が必要         |
 | Utility        | ○   | △   | ユニットテストが容易         |


- ○ :: このテストで品質担保する
- △ :: 他のテストで間接的にテストする


テストを書くと決めた箇所については、テストコードは正式な成果物として定義すること。

** 全てのテストを書こうとしない。

- 最初は、自動化の範囲は狭くてもよい。
  - 0->1の進歩は極めて大きい。
- 手動でテストする範囲は残るものと考える。
  - 少なくとも画面レイアウトは、2016年現在、人間が見ることになる。
- いきなりEnd to Endのテストは難易度高い

* ビルド戦略を立てる
- いつ自動テストを実行するか
- CIに組み込めないか

* ステレオタイプ毎のテストサンプルを作成する

- サンプルが上手くできていれば、ほとんどの開発者はテストを書けます。
- ここで手を抜いて開発者/委託先に丸投げすると、コードにバラツキが出る。
- テストコードは成果物です。
