# -*- coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org
# #+TITLE: 既存プロジェクトにテストを導入する

* 既存プロジェクトにテストを導入する
** 既存プロジェクト特有の難しさ

- テストを後付けで整備する _工数_ が捻出できない
- _仕様_ がわからない
- 「レガシーシステム」の _ジレンマ_ 
  - 構造が複雑すぎてテストが書けない
  - テストが書けないので構造を変えられない

どう立ち向かっていくか。

** テストコードを整備する余力がありません

- 私のシステムには _テストコードがありません_ 。
- テストコードを整備する _工数を捻出できません_ 。

*** 突破口
- システム全体にテストコードを整備するのは大変
- _追加/変更する箇所だけ_ テストを書く

以下、具体的なテクニックを『レガシーコード改善ガイド』より。

https://images-fe.ssl-images-amazon.com/images/I/51f-xfTWkkL._SX260_.jpg]]

*** スプラウトメソッド

既存の巨大なメソッドに機能追加しないといけない場合

- 追加機能を新規メソッドで作成する
- そのメソッドのテストを書く
- 元の巨大メソッドから新規メソッドを呼び出す

#+BEGIN_SRC java
    void 既存メソッド(String input) {
         // 既存の処理
         //     :
         新規メソッド(input);   // 呼び出し
         //     :
         // 既存の処理
    }
    void 新規メソッド(String input) {
         // 追加機能
    }
#+END_SRC

*** 例：修正前コード

#+BEGIN_SRC java
     public void register(Member member) {
         // DBに登録
         db.insert(member);
     }
#+END_SRC

- 登録する前にバリデーションを入れたい。

*** そのまま処理追加した例

#+BEGIN_SRC java

     public void register(Member member) {
         // 入力項目のバリデーション
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // その他のバリデーション .....
          
         // DBに登録
         db.insert(member);
     }

#+END_SRC

*** 問題点

- 正しく変更できたかどうか確認できない
  - 既存機能にテストは無く、既存メソッドのテストを書くのは大変
- 「バリデーション」と「DB登録」という _２つの操作_ がゴチャっと混在している

*** 解決案

#+BEGIN_SRC java
     public void register(Member member) {
         // 入力項目のバリデーション（『スプラウトメソッド』の呼び出し）
         validate(member);
           
         // DBに登録
         db.insert(member);
     }

     //// 新しく追加された『スプラウトメソッド』
     //// ここは簡単にテストを書ける！
     void validate(Member member) {
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // その他のバリデーション .....
     }
#+END_SRC

*** そのテストコード
#+BEGIN_SRC java
    @Test
    public void 郵便番号の桁数が不足している場合_例外が発生すること() {
         MemberService service = new MemberService();
         Member member = new Member();
         member.setName("山田太郎");
         member.setPostalCode("123456");  // 郵便番号6桁なのでエラー
         try {
             service.register(member);
             fail("期待した例外が発生しませんでした");
         } catch (IllegalArgumentException e) {
             assertEquals("郵便番号が不正です", e.getMessage());
         }
    }
#+END_SRC

※既存機能のDB登録は全く確認していない。


*** スプラウトクラス

スプラウトメソッドのクラス版

- 追加する機能を実現するクラスを新規追加する
- そのクラスのテストを書く
- 元の巨大メソッドから新規クラスを呼び出す

#+BEGIN_SRC plantuml :file sp-class.png :cmdline -charset UTF-8
scale 400 * 400
class 既存クラス
class 新規クラス
class テストクラス
既存クラス --> 新規クラス : 呼び出す
テストクラス --> 新規クラス : テストする
#+END_SRC

#+RESULTS:
 [[file:sp-class.png]]


*** スプラウトクラスの例

#+BEGIN_SRC java
     public void register(Member member) {
         // 入力項目のバリデーション（『スプラウトクラス』の呼び出し）
         MemberValidator validator = new MemberValidator();
         validator.validate(member);
          
         // DBに登録
         db.insert(member);
     }
#+END_SRC

#+BEGIN_SRC java
class MemberValidator {

     void validate(Member member) {
         if (member.getName().isEmpty()) {
              throw new IllegalArgumentException("名前が入力されていません");
         }
         if (member.getPostalCode().matches("[0-9]{7}")) {
              throw new IllegalArgumentException("郵便番号が不正です");
         }
         // .....
     }
}
#+END_SRC

*** スプラウトメソッドとの使い分け

以下のようなケースでは、スプラウトクラスを使います。

- 既存クラスが大きすぎてメソッド追加したくない
- クラスのテストが書きにくい
  - いろんなものが無いとnewできない、実行できない
    - DBコネクション
    - 入力ファイル
- 追加する機能が元クラスの責務から外れる

** システムの仕様がわかりません

- テストを書くには _仕様を理解_ する必要があります
- 設計書はメンテされておらず、何が正解なのか誰もわかりません
- 唯一言えるのは、 _現在の動作が正解_ ということだけです

*** 仕様化テスト

現在のシステムの動作を正として、システムの振る舞いを写し取るテスト。
(Characterization Test)

- Characterization :: 性格描写、特徴付け、特性評価

*** 仕様化テストの書き方

- とりあえず適当な入力で既存機能を呼び出してみる
- 適当な値で結果比較する
- 結果比較に失敗するので、期待値を実際の値に書き換える
- カバレッジを見ながら、上記作業を繰り返す

以下、実際にやってみます。

*** デモ(例：割引率を計算する。)

- 1千円以上1万円未満買い上げの方は1割引
- 1万円以上お買い上げの方は2割引
- 1千円未満は割引なし

| お買上げ額    | 割引率 |
|---------------+--------|
| ～1000円      |     0% |
| 1000～10000円 |    10% |
| 10000円～     |    20% |


「価格に負数が渡されて請求額が不正になるバグが発覚した」とする。

** やる気が出ません

- 毎日スパゲッティコードを相手しています。
- とても改善ができると思えません。


⇒レガシーコード改善ガイド  第24章 
 『もうウンザリです。何も改善できません』


*** 少々コードが整備されたところで現実は変わらないのでは？

#+BEGIN_QUOTE
「どうせ90パーセントの時間をヘドロのようなものを相手に過ごすのに、この小さい部分だけきれいにしたところで何だというのだ。もちろん、この小さな部分は改善できる。しかし、それが今日の午後、あるいは明日の私にとって何の役に立つだろうか？」。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 改善を続けると…

#+BEGIN_QUOTE
しかし、一貫してそのような小さな改善を続ければ、数ヶ月の間にシステムは見違えるような状態になります。ある日の朝、ヘドロを相手に汚い仕事をするつもりで会社に来ると、次のことに気づきます。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 自分が変わる

#+BEGIN_QUOTE
「あれ？このコードはいい感じになっているぞ。誰かがこのコードを最近リファクタリングしたようだ」。その時点、すなわち優れたコードと悪いコードの違いを直感的に理解できた時こそが、皆さんが変わる時です。

『レガシーコード改善ガイド』
#+END_QUOTE


*** 隣の新規開発の芝は、実はそれほど青くない

#+BEGIN_QUOTE
レガシーシステムを担当する人たちは、しばしば新規開発に携わることを望みます。
＜中略＞
しかし率直に言って、新規開発には、新規開発なりの問題があります。

『レガシーコード改善ガイド』
#+END_QUOTE

*** 取り組む姿勢が重要

#+BEGIN_QUOTE
私は、数百万行ものレガシーコードを扱っているいくつかのチームを訪れたことがあります。これらのチームは、毎日が挑戦であり、物事をより良くする機会であるととらえ、仕事を楽しんでいました。

『レガシーコード改善ガイド』
#+END_QUOTE

新規か保守かは重要でない

*** 本章のまとめ

- コードを変えれば自分が変わる（成長する）
  - _正しいやり方_ を覚える
    - テストが書ける
    - リファクタリングができる
  - 正しいやり方ができると _自信_ が持てる
- 新規か保守かは重要でない
  - むしろ重要なのは取り組む姿勢
  - 指示をもらうのではなく、 _許可・裁量_ をもらいましょう
