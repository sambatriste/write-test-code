# -*- coding: utf-8-unix -*-

#+SETUPFILE: ./conf.org
#+TITLE: なぜテストコードを書く必要があるのか

* なぜテストを書くのか

- テスト書くのめんどくね？
- 打鍵すりゃいいじゃん

** 効率がよい

組み上がった巨大なシステムより、部品のほうがテストが楽

- 準備がかんたん
- 結果確認がかんたん
- 実行が早い

***  パチンコ部品検査のバイト

- 玉が通過したことを感知するセンサー
- 先端にパチンコ玉がついた棒を、センサーに通して確認

この部品を、パチンコ台に組み込んでからテストするとしたら…？



*** クラス単位のテスト

xUnitを使ってユニットテストを書くと、テスト対象の粒度が細かくできます。

| テスト手法 | テスト対象       |
|------------+------------------|
| xUnit      | クラス, メソッド |
| 手動テスト | 画面, プログラム |


** 資産になる
- 回帰テスト
- 仕様
  - プロダクションコードと一緒にバージョン管理される

** 新しい技術・手法を取り入れる

テストコードが無い/書かないことは、新しい技術を取り入れられない。

- リファクタリング
- アジャイル
- テスト駆動開発(Test Driven Development)
- 継続的インテグレーション, 継続的デリバリー, DevOps
- ドメイン駆動設計(Domain Driven Design)
- マイクロサービスアーキテクチャ

** テストに関連する技術・手法の依存関係
#+BEGIN_SRC plantuml :file techs.png :cmdline -charset UTF-8
scale 400 * 500
object Test
object Refactoring
object "CI/CD" as cicd
object DevOps
object "Microservices" as msa
object Agile
object "Domain Driven Design" as ddd
' object "Test Driven Design" as tdd

Test -- Refactoring
' Test -- Agile
Refactoring -- Agile
Agile -- ddd
' Test -- tdd
' Refactoring -- tdd
Test -- cicd
cicd -- DevOps
DevOps -- msa
DevOps -- Agile

#+END_SRC

#+RESULTS:
[[file:techs.png]]


* 逆に、テストを書かないと…

テストを書かないと実は様々な

** 内部のアーキテクチャ検討が適当になる

#+BEGIN_QUOTE
良い設計はテスト可能であり、テスト可能でない設計は悪い設計である、ということは常に真実です。

『レガシーコード改善ガイド 』
#+END_QUOTE

- どのクラスをどうテストするか検討していない
  - ステレオタイプの定義をしない
- エントリポイントにだらだら処理を書く
  - 巨大なexecuteメソッド

** システム外部からテストするしかなくなる

ブラウザやコマンドラインからしかテストができません。

- モジュール単体（クラス、メソッド）の品質を上げる機会を失う
- さらに内部の構造が適当になる

*** テストコードを書くと…

テストコードを書くと、テスト対象モジュールのおかしさに気づくことがあります
- クラスを使うために
- 

** 構造を修正できない
- テストコード無しでリファクタリングは非現実的

** 開発のツケが保守フェーズの負担となる

- スパゲッティのため修正（コード理解）に工数がかかる
- 回帰テストがないのでテスト工数がかさむ
- 素早く開発→デプロイを繰り返すこともできない
- 自分たちのやり方に自信が持てず、保守メンバーのモチベーション低下
