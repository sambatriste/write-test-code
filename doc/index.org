# -*- mode: org; coding: utf-8-unix -*-

#+TITLE: テスト書こう

#+OPTIONS: toc:0
#+OPTIONS: reveal_single_file:t
#+REVEAL_EXTRA_CSS: ~/.emacs.d/lib/reveal.js/mystyle.css


* なぜテストコードを書く必要があるのか

** テストの効率がよい

組み上がった巨大なシステムより、部品単位のほうがテストが楽

** テストがない（書けない）ことによる品質面でのデメリット

*** 内部のアーキテクチャ検討が適当になる

#+BEGIN_QUOTE
良い設計はテスト可能であり、テスト可能でない設計は悪い設計である、ということは常に真実です。
#+END_QUOTE
マイケル・C・フェザーズ. レガシーコード改善ガイド 

- どのクラスをどうテストするか検討していない
  - ステレオタイプの定義をしない
- エントリポイントにだらだら処理を書く

*** システム外部（ブラウザやコマンドライン）からテストするしかなくなる
- モジュール単体（クラス、メソッド）の品質を上げる機会を失う
  - （テストコードを書く場合、変なモジュールを書くとテストが上手く書けないので気付ける）
- さらに内部の構造が適当になる

*** おかしくなった構造を修正できない
- テストコード無しでリファクタリングは非現実的

*** 開発のツケが保守フェーズの負担となる
- スパゲッティのため修正（コード理解）に工数がかかる
- 回帰テストがないのでテスト工数がかさむ
- 素早く開発→デプロイを繰り返すこともできない
- 自分たちのやり方に自信が持てず、保守メンバーのモチベーション低下

** 新しい技術・手法を取り入れる

テストコードが無い/書かないことは、新しい技術を取り入れられない。

- リファクタリング
- アジャイル
- TDD
- CD/CI->DevOps
- DDD
- マイクロサービスアーキテクチャ

#+BEGIN_SRC plantuml :file techs.png :cmdline -charset UTF-8
object Test
object Refactoring
object "CI/CD" as cicd
object DevOps
object "Microservices" as msa
object Agile
object "Domain Driven Design" as ddd
' object "Test Driven Design" as tdd

Test -- Refactoring
' Test -- Agile
Refactoring -- Agile
Agile -- ddd
' Test -- tdd
' Refactoring -- tdd
Test -- cicd
cicd -- DevOps
DevOps -- msa
DevOps -- Agile

#+END_SRC

#+RESULTS:
[[file:techs.png]]


* テストコードの書きかた入門編
** JUnit紹介
概要だけさらっと

** TDD Bootcampを例に（デモ）

http://devtesting.jp/tddbc/?TDDBC%E4%BB%99%E5%8F%B003%2F%E8%AA%B2%E9%A1%8C


* こんなときどうテストするか
** エラー（例外が発生する）ケース

** 実行時によって動作が変わるケース
- システムクロック
  - 過去日であること
- 乱数


** 引数以外の入力が必要なケース
- ファイル

** テスト対象に副作用があるケース


* ☆現場にどうやってテストを持ち込むか

見積もりに予め含めておく

失敗例
- ☆委託先にまかせきりでコード品質にバラツキ
- (当時CI環境が整備されてなかった)

テストコードは資産なのでレビュー必要

** 新規プロジェクトの場合

*** 絶対やっておくべきこと

テストの計画を立てる計画にする。

「できればやる」は「やらな

*** テスト戦略を立てる。

モジュールをどうテストするか

こういうふうにした根拠とか

 |         | 自動 | 手動 |
 |---------+------+------|
 | Action  | -    | ○   |
 | Form    | -    | △   |
 | Service | ○   | △   |
 | Entity  | △   | △   |
 | View    | -    | ○   |
 | Utility | ○   | △   |

最初は、自動化の範囲は狭くてもよい。
0->1の進歩は極めて大きい。

手動でテストする範囲は残るものと考える。
少なくとも画面レイアウトは、2016年現在、人間が見ることになる。


いきなりEnd to Endのテストは難易度高い

*** ビルド戦略を立てる
 - いつ自動テストを実行するか
 - CIに組み込めないか

*** ステレオタイプ毎のテストサンプルを作成する

 参照系
 更新系

 サンプルが上手くできていれば、ほとんどの開発者はテストを書けます。


** ☆既存プロジェクトの場合

☆ここ興味強いかも


- テストがないのでリファクタリングできない
- リファクタリングできないのでテストができない

レガシーコード改善ガイドのテクニック紹介

*** スプラウトクラス/スプラウトメソッド


*** 仕様化テスト

** ステークホルダーを説得する方法

- たいしてコストが掛からないことを主張する
  - コスパがよい箇所をテストする
  - 無理に全てをテスト対象としない

- 計画、見積もりをする
  - 

- 品質評価に使えることを主張する
  - カバレッジ

- 部門、メンバーの成長に必要であることを主張する
  - メンバーが成長できないとモチベーションが維持できない
  - このままでは新しい取り組みもできない


** カバレッジ

- 取り方
  - 操作方法
  - 原理
- C0/C1



