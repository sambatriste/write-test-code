# -*- coding: utf-8-unix -*-

# #+SETUPFILE: ./conf.org
# #+TITLE: 新規プロジェクトにテストを導入する


* 新規プロジェクトにテストを導入する
** 絶対やっておくべきこと

- 最初から計画に織り込んでおくこと
  - どうテストを書く/するのか検討する計画に
  - あらかじめコストを積んでおく
- テストコードを正式な成果物として定義すること
- テスコトードのサンプルを作成すること

** テスト戦略を立てる

モジュールをどうテストするか、あらかじめ検討をしておく。

- どのクラスを
- どの工程で
- どうやって

テストするか

*** ステレオタイプ毎のテスト例

| クラス  | 自動 | 手動 | 説明                     |
|---------+------+------+--------------------------|
| Action  | -    | ○   | 画面との結び付きが強い   |
| Form    | ○   | △   | ユニットテストが容易     |
| Service | ○   | △   | ロジックの中心。がんばる |
| Entity  | △   | △   | 自動生成                 |
| View    | -    | ○   | レイアウト確認が必要     |
| Utility | ○   | △   | ユニットテストが容易     |

- ○ このテストで品質担保する
- △ 他のテストで間接的にテストする

*** 全てのテストを書こうとしない。

- 最初はテストを書く範囲は狭くてもよい。
  - 0->1の進歩は極めて大きい。
- 手動でテストする範囲は残るものと考える。
  - 少なくとも画面レイアウトは人間が見ることに(2016年現在)。
- いきなりEnd to Endのテストは難易度高い

** ビルド戦略を立てる

- いつ自動テストを実行するか
- CIに組み込めるか

** サンプルを作成する（重要！）

- サンプルが上手くできていれば、ほとんどの開発者はテストを書けます。
- ここで手を抜いて開発者/委託先に丸投げすると、コードにバラツキが出る。
- テストコードは成果物です。
